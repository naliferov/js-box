{"code":"\nconst { x, o, dom } = $\n\nconst stdObjects = await x.p('get', { project: 'std', getAll: {} })\n\nawait x.s('subToCodeInput', (x) => {\n    document.addEventListener('input', async (e) => {\n      const t = e.target\n      if (!t.classList || !t.classList.contains('object-code')) return\n      const id = t.getAttribute('object-id')\n      if (!id || id === 'main') return\n\n      const object = await x.p('getObject', { id })\n      object.code = t.innerText\n    })\n})\n\nconst remove4CharsBeforeCursor = () => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n  \n    const range = selection.getRangeAt(0);\n    const startOffset = range.startOffset;\n  \n    //if (startOffset >= 4) {\n    //  const currentNode = range.startContainer;\n    //  const cursorPosition = startOffset - 4;\n  //\n  //    range.setStart(range.startContainer, cursorPosition);\n   //   range.deleteContents();\n   //   range.setStart(currentNode, cursorPosition)\n  //    range.collapse(true)\n  //\n  //    selection.removeAllRanges();\n  //    selection.addRange(range);\n  //  }\n}\n\nconst insertTxtAtCursor = (txt) => {\n    const selection = window.getSelection()\n    if (!selection.rangeCount) return\n\n    const range = selection.getRangeAt(0)\n    range.deleteContents()\n\n    const txtNode = document.createTextNode(txt)\n    range.insertNode(txtNode)\n\n    range.setStartAfter(txtNode)\n    range.setEndAfter(txtNode)\n    selection.removeAllRanges()\n    selection.addRange(range)\n}\n\nawait x.s('renderMainObject', async (x) => {\n\n  const { target, object: oData } = x\n    \n  const id = oData.id\n  const o = await x.p('oFactory', { state: oData })\n  await x.p('setObject', { o })\n\n  const dom = await x.p('docMkElement', {\n    attributes: { id },\n    class: 'block',\n  })\n\n  target.append(dom)\n\n  const pre = await x.p('docMkElement', { tag: 'pre', class: 'object-code' })\n  pre.setAttribute('contenteditable', 'plaintext-only')\n  pre.setAttribute('object-id', id)\n  pre.innerText = o.code\n  pre.addEventListener('keydown', (e) => {\n     if (e.key !== 'Tab') return\n     e.preventDefault()\n     if (e.shiftKey) {\n       //remove4CharsBeforeCursor()\n       return\n     }\n     insertTxtAtCursor('    ')\n  })\n\n  dom.append(pre)\n\n  const code = `\n    export default async ($) => { \n      ${o.code}\n    } //todo add code for detect finish of script exec \n  `\n  const url = URL.createObjectURL(\n    new Blob([code], { type: 'application/javascript' })\n  )\n\n  try {\n    const m = await import(url)\n    m.default({ x, o, state: o, dom, id, sysId: id, domId: id })\n  } catch (e) {\n    console.error(e)\n  }\n})\n\nconst app = document.getElementById('app')\n\nfor (let i = 0; i < stdObjects.length; i++) {\n    let object\n    try {\n       object = JSON.parse(stdObjects[i])\n    } catch (e) {\n       console.log(e)\n       continue\n    }\n    if (object && object.id === 'main') {\n        continue\n    }\n    await x.p('renderMainObject', { target: app, object })\n}\n\nawait x.p('subToCodeInput')\n\n  setTimeout(() => {\n    const scroll = localStorage.getItem('scroll')\n    if (scroll) {\n        const { x, y } = JSON.parse(scroll)\n        window.scrollTo(x, y)\n    }\n    window.addEventListener('scroll', () => {\n      const s = { x: window.scrollX, y: window.scrollY }\n      localStorage.setItem('scroll', JSON.stringify(s))\n    })\n  }, 250)\n\nconst header = await x.p('addHeader', { dom })\nawait x.p('objectName', { target: header, name: 'main' })\n\nawait x.p('codeShowCtrl', {\n    in: { blockDom: dom, target: header, state: o }\n})\n\n","id":"main","showCode":true}