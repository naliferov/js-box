{"id":"01JP22650SMSN9MV9DJ5D9J7YT","code":"\nconst { x, o, dom } = $\nawait x.p('stdObjectControls', { target: dom, o })\n\nconst { ulid } = await import('https://cdn.jsdelivr.net/npm/ulid/+esm')\nconst { PGlite } = await import('https://cdn.jsdelivr.net/npm/@electric-sql/pglite/dist/index.js');\nconst db = new PGlite('idb://my-pgdata')\n\n\nif (false) {\n    const r = await db.exec(`\n        CREATE TABLE objects (\n            id CHAR(26) PRIMARY KEY,\n            data JSONB NOT NULL,\n            internal_id CHAR(26) REFERENCES objects(id) ON DELETE SET NULL,\n            previous_id CHAR(26) REFERENCES objects(id) ON DELETE SET NULL,\n            next_id CHAR(26) REFERENCES objects(id) ON DELETE SET NULL\n        );\n        CREATE TABLE objects_operations (\n            id CHAR(26) PRIMARY KEY,\n            data JSONB NOT NULL\n        );\n    `);\n    console.log(r);\n\nconsole.log(await db.query(`SELECT * FROM objects`));\n\n} else {\n  const object = await x.p('getObject', { id: 'main' })\n  const json = JSON.stringify(object)\n  //console.log(await db.query(`DROP TABLE objects`));\n  //await db.query(`INSERT INTO objects (id, data) VALUES ($1, $2);`, ['main', json]);\n  //await db.query(`INSERT INTO objects (id, data) VALUES ($1, $2);`, ['main2', json]);\n  //await db.query(`INSERT INTO objects (id, data) VALUES ($1, $2);`, ['main3', json]);\n  //await db.query(`INSERT INTO objects (id, data) VALUES ($1, $2);`, [ulid(), json]);\n\n  //console.log(await db.query(`SELECT id, data FROM objects`));\n  //console.log(tables)\n}\n\n\n","name":"std.storage"}