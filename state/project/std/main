{"code":"\nconst { x, o, dom } = $\n\nawait x.s('subToCodeInput', (x) => {\n    document.addEventListener('input', async (e) => {\n      const t = e.target\n      if (!t.classList || !t.classList.contains('object-code')) return\n      const id = t.getAttribute('object-id')\n      if (!id || id === 'main') return\n\n      const object = await x.p('getObject', { id })\nconsole.log(object)\n\n      object.code = t.innerText\n    })\n})\n\nconst remove4CharsBeforeCursor = () => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n  \n    const range = selection.getRangeAt(0);\n    const startOffset = range.startOffset;\n}\n\nconst insertTxtAtCursor = (txt) => {\n    const selection = window.getSelection()\n    if (!selection.rangeCount) return\n\n    const range = selection.getRangeAt(0)\n    range.deleteContents()\n\n    const txtNode = document.createTextNode(txt)\n    range.insertNode(txtNode)\n\n    range.setStartAfter(txtNode)\n    range.setEndAfter(txtNode)\n    selection.removeAllRanges()\n    selection.addRange(range)\n}\n\nawait x.s('renderObject', async (x) => {\n\n  const { target, object: oData } = x\n    \n  const id = oData.id\n  const o = await x.p('oFactory', { state: oData })\n  await x.p('setObject', { o })\n\n  const dom = await x.p('docMkElement', {\n    attributes: { id },\n    class: 'object',\n  })\n\n  target.append(dom)\n\n  const pre = await x.p('docMkElement', { tag: 'pre', class: 'object-code' })\n  pre.setAttribute('contenteditable', 'plaintext-only')\n  pre.setAttribute('object-id', id)\n  pre.innerText = o.code\n  pre.addEventListener('keydown', (e) => {\n     if (e.key !== 'Tab') return\n     e.preventDefault()\n     if (e.shiftKey) return\n     insertTxtAtCursor('    ')\n  })\n  dom.append(pre)\n\n  const code = `\n    export default async ($) => { \n        ${o.code}; \n    }\n  `\n  const blob = new Blob([code], { type: 'application/javascript' })\n  try {\n    const m = await import(URL.createObjectURL(blob))\n    m.default({ x, o, dom, id, sysId: id, domId: id })\n  } catch (e) {\n    console.error(e)\n  }\n\n  return o\n})\n\nconst app = document.getElementById('app')\n\nconst stdObjects = await x.p('get', { project: 'std', getAll: {} })\nfor (let i = 0; i < stdObjects.length; i++) {\n    let object\n    try {\n       object = JSON.parse(stdObjects[i])\n    } catch (e) {\n       console.log(e)\n       continue\n    }\n    if (object && object.id === 'main') {\n        continue\n    }\n    await x.p('renderObject', { target: app, object })\n}\n\nawait x.p('subToCodeInput')\n\n  setTimeout(() => {\n    const scroll = localStorage.getItem('scroll')\n    if (scroll) {\n        const { x, y } = JSON.parse(scroll)\n        window.scrollTo(x, y)\n    }\n    window.addEventListener('scroll', () => {\n      const s = { x: window.scrollX, y: window.scrollY }\n      localStorage.setItem('scroll', JSON.stringify(s))\n    })\n  }, 250)\n\nconst header = await x.p('addHeader', { dom })\nawait x.p('objectName', { target: header, name: 'main' })\n\nawait x.p('codeShowCtrl', {\n    in: { objectDom: dom, target: header, o }\n})\n\n","id":"main","showCode":true}