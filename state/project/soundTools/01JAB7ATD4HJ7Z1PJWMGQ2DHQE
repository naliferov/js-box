{"code":"const { x, dom, o } = $\n\nconst name = o.name\n\nawait x.s(name, async (x) => {\n    const { dom, o } = x\n\n    const div = document.createElement('div')\n    dom.append(div)\n    const shadow = div.attachShadow({mode: 'open'})\n    const style = document.createElement('style')\n    style.innerHTML =\n`\n.row {\n    display: flex;\n}\n.cell {\n    background: black;\n}\n.cell.selected {\n    background: white;\n}\n`\n\n\n    if (!o.steps) {\n        o.steps = [\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0\n        ]\n    }\n\n    shadow.append(style)\n    const cont = document.createElement('div')\n    shadow.append(cont)\n\n    shadow.addEventListener('pointerdown', (e) => {\n        const t = e.target       \n        if (!t) return\n        const list = t.classList\n        if (!list.contains('cell')) return\n        \n        const i = t.getAttribute('index')\n\n        if (list.contains('selected')) {\n            list.remove('selected')\n            o.steps[i] = 0\n        } else {\n            list.add('selected')\n            o.steps[i] = 1\n        }\n    })\n\n    const rowCount = 16\n    const cellCount = 16\n    const cellWidth = '32px'\n    const cellHeight = '12px'\n    const cellSize = '16px'\n    const cellGap = '2px'\n\n    const row = (number) => {\n        const r = document.createElement('div')\n        r.className = 'row'\n        r.setAttribute('index', number)\n        return r\n    }\n    const cell = (number, isSelected) => {\n        const c = document.createElement('div')\n        c.className = 'cell'\n        if (isSelected) c.className += ' selected'\n        c.setAttribute('index', number)\n        c.style.width = cellWidth\n        c.style.height = cellHeight\n        c.style.margin = cellGap\n        return c\n    }\n    for (let i = 0; i < rowCount; i++) {\n        const r = row(i)\n        for (let j = 0; j < cellCount; j++) {\n            const isSelected = Boolean(i === 0 && o.steps[j]) \n            r.append(cell(j, isSelected))\n        }\n        cont.append(r)\n    }\n\n    const btn = document.createElement('div')\n    btn.innerText = 'btn'\n    shadow.append(btn)\n\n    await import('http://unpkg.com/tone')\n    const synth = new Tone.PolySynth().toDestination()\n\n    btn.addEventListener('pointerdown', async () => {\n\n     const stepLen = '16n'\n     Tone.Transport.stop()\n     Tone.Transport.cancel()\n     Tone.Transport.bpm.value = 100\n\n        //\n     const row = console.log(cont.children[0])\n\nreturn\n\n      for (let i = 0; i < 16; i++) {\n        if (steps[i]) {\n          const stepTime = i * Tone.Time(stepLen).toSeconds()\n\n          //Tone.Transport.schedule((time) => {\n          //  synth.triggerAttackRelease('C4', '16n', time)\n          //}, stepTime)\n        }\n      }\n\n      await Tone.start();\n      Tone.Transport.start();\n    })\n})\n\n\nawait x.p('stdObjectControls', { target: dom, o })\n\n","state":{"showCode":true},"id":"01JAB7ATD4HJ7Z1PJWMGQ2DHQE","name":"sequencer","showCode":true}